Handshake
Endpoint Client;
Endpoint Server;

Sequences {
	SeqSendMSG: Client.sendMSG -> Server.receiveMSG;
	SeqSendCMD: Client.sendCMD -> Server.receiveCMD;
	SeqAlertClient: Server.alert -> Client.get;
}

Sequence SeqSendMSG (Text msg) returns Text result
{
	Client.sendMSG {
	}
	
	Server.receiveMSG {
		signal(display_msg_func, msg);
	}

}

Sequence SeqSendCMD (Number command, TrueFalse entervote) returns Text result
{
	
	Client.sendCMD {
		
	}
	
	Server.receiveCMD {
		signal(vote_func, command, entervote);
	}

}

Sequence SeqAlertClient (List (element: Number) games) returns Text result
{
	Server.alert {
		signal(display_msg_func, "Something is happening...");
	}
	
	Client.get {
		signal(getData, games);
	}

}
 
Client
{
	Number currGame;
	Text name;
	
	Function (in: Text; returns: Nothing) getData;
	
	onCreate (Function (in: Text; returns: Nothing) init_get_data, Text n) {
		getData = init_get_data;
		name = n;
		currGame = 0;
		SeqSendMSG(name + " has connected!");
	}
	
	Public Function send_msg(Text msg) {
		SeqSendMSG(msg);
	}
	
	Public Function send_cmd(Number cmd, TrueFalse enter) {
		SeqSendCMD(cmd, enter);
	}
	
	Public Function getName() returns Text {
		return name;
	}
	
}

Server
{
	
	Function (in: Text; returns: Nothing) display_msg_func;
	Function (in: Number, TrueFalse; returns: Nothing) vote_func;
	
	onCreate (Function (in: Text; returns: Nothing) init_display_msg_func,
			  Function (in: Number, TrueFalse; returns: Nothing) init_vote_func) {
		display_msg_func = init_display_msg_func;
		vote_func = init_vote_func;
	}
	
	Public Function alertClient(List (element: Number) availGame) {
		SeqAlertClient(availGame);
	}
		
}
