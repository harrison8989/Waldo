Handshaker
Endpoint Client;
Endpoint Server;

Sequences {
	SeqSendMSG: Client.sendMSG -> Server.receiveMSG;
	SeqSendCMD: Client.sendCMD -> Server.receiveCMD -> Client.update;
	SeqGetGames: Server.alert -> Client.get;
	SeqRetrieveMSG: Client.request -> Server.obtainMSG -> Client.put;
	SeqCurrGame: Client.init -> Server.obtainGame -> Client.receiveGame;

}

Sequence SeqSendMSG (Text msg)
{
	Client.sendMSG {

	}

	Server.receiveMSG {
		signal(display_msg_func, msg);
	}

}

Sequence SeqSendCMD (Number command, TrueFalse toEnterVote) returns TrueFalse ready
{
	TrueFalse readyStatus;

	List (element: Number) temp;
	Number theGame = -1;


	Client.sendCMD {
		theGame = currGame;
	}

	Server.receiveCMD {
		if(command > -3) {
			     signal(vote_func, command, toEnterVote);
		}
		for(Number n in gameStatus)
			   temp.append(n);
		if(len(temp) >= 3) {
			if((temp[0] >= 2) and (theGame == 0))
				readyStatus = True;
			if((temp[1] >= 2) and (theGame == 1))
				readyStatus = True;
			if((temp[2] >= 2) and (theGame == 2))
				readyStatus = True;
		}

	}

	Client.update {
		ready = readyStatus;
	}

}

Sequence SeqGetGames (List (element: Number) games)
{
	Server.alert {
	}

	Client.get {
		signal(getData, games);
	}

}

Sequence SeqRetrieveMSG ()
{
	Number position;
	Text t;
	TrueFalse shift = False;
	Client.request {
	        position = pos;
	}

	Server.obtainMSG {
		if(position < len(msgs)) {
		        t = msgs[position];
			shift = True;
		}
	}


	Client.put {
		if(shift)
			pos += 1;
		if(t != '') {
		     	signal(getMSG, t);
			signal(getData, [9, 9, 9]);
		}
	}

}

Sequence SeqCurrGame ()
{
	Number currPos;
	Client.init {

	}
	Server.obtainGame {

		currPos = len(msgs);
	}
	Client.receiveGame {
		pos = currPos;
	}

}

Client
{
	Number currGame;
	Text name;
	Number pos;

	Function (in: Text; returns: Nothing) getData;
	Function (in: Text; returns: Nothing) getMSG;

	onCreate (Function (in: Text; returns: Nothing) init_get_data, Function (returns: Text) init_get_MSG, Text n) {
		getData = init_get_data;
		getMSG = init_get_MSG;
		name = n;
		currGame = -1;
		SeqCurrGame();
	}

	Public Function send_msg(Text msg) {
		SeqSendMSG(msg);
	}

	Public Function send_cmd(Number cmd, TrueFalse toEnter) returns TrueFalse {
		return SeqSendCMD(cmd, toEnter);
	}

	Public Function getName() returns Text {
		return name;
	}

	Public Function getGame() returns Number {
	       return currGame;
	}

	Public Function setGame(Number n) {
	       currGame = n;
	}

	Public Function retrieveMSG() {
	       SeqRetrieveMSG();
	}
}

Server
{
	List (element: Number) gameStatus;
	List (element: Text) msgs;



	Function (in: Text; returns: Nothing) display_msg_func;
	Function (in: Number, TrueFalse; returns: Nothing) vote_func;

	onCreate (Function (in: Text; returns: Nothing) init_display_msg_func,
			  Function (in: Number, TrueFalse; returns: Nothing) init_vote_func) {
		display_msg_func = init_display_msg_func;
		vote_func = init_vote_func;
	}

	Public Function alertClient(List (element: Number) availGame) {
		SeqGetGames(availGame);
	}

	Public Function receiveStatus(List (element:Number) status) {
	       gameStatus = [];
	       for(Number num in status)
	       		  gameStatus.append(num);

	}

	Public Function addMSG(Text msg) {
	       if(msg != '')
	       	      msgs.append(msg);
	}

	Public Function getMSGS() returns List(element:Text) {
	       return msgs;
	}

	Public Function changeMSGS(List(element:Text) list) {
	       msgs = list;
	}


}
